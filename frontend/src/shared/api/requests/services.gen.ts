// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { AuthControllerSignUpData, AuthControllerSignUpResponse, AuthControllerSigninData, AuthControllerSigninResponse, UsersControllerMeResponse, UsersControllerUpdateMeData, UsersControllerUpdateMeResponse, UsersControllerGetMyWishesResponse, UsersControllerFindOneByNameData, UsersControllerFindOneByNameResponse, UsersControllerFindWishesByNameData, UsersControllerFindWishesByNameResponse, UsersControllerFindData, UsersControllerFindResponse, WishesControllerCreateData, WishesControllerCreateResponse, WishesControllerFindLastResponse, WishesControllerFindTopResponse, WishesControllerFindOneData, WishesControllerFindOneResponse, WishesControllerUpdateData, WishesControllerUpdateResponse, WishesControllerRemoveData, WishesControllerRemoveResponse, WishesControllerCopyData, WishesControllerCopyResponse, WishlistsControllerCreateData, WishlistsControllerCreateResponse, WishlistsControllerFindAllResponse, WishlistsControllerFindOneData, WishlistsControllerFindOneResponse, WishlistsControllerUpdateData, WishlistsControllerUpdateResponse, WishlistsControllerRemoveData, WishlistsControllerRemoveResponse, OffersControllerCreateData, OffersControllerCreateResponse, OffersControllerFindAllResponse, OffersControllerFindOneData, OffersControllerFindOneResponse, AchievementsControllerCreateData, AchievementsControllerCreateResponse, AchievementsControllerFindLastResponse, AchievementsControllerFindOneData, AchievementsControllerFindOneResponse, AchievementsControllerUpdateData, AchievementsControllerUpdateResponse, AchievementsControllerRemoveData, AchievementsControllerRemoveResponse, AchievementsControllerCopyData, AchievementsControllerCopyResponse } from './types.gen';

export class AuthService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns User Пользователь успешно создан.
     * @throws ApiError
     */
    public static authControllerSignUp(data: AuthControllerSignUpData): CancelablePromise<AuthControllerSignUpResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/signup',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Успешная авторизация.
     * @throws ApiError
     */
    public static authControllerSignin(data: AuthControllerSigninData): CancelablePromise<AuthControllerSigninResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/signin',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
}

export class UsersService {
    /**
     * @returns User Пользователь
     * @throws ApiError
     */
    public static usersControllerMe(): CancelablePromise<UsersControllerMeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/users/me'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns User Пользователь
     * @throws ApiError
     */
    public static usersControllerUpdateMe(data: UsersControllerUpdateMeData): CancelablePromise<UsersControllerUpdateMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/users/me',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @returns Wish Мои подарки
     * @throws ApiError
     */
    public static usersControllerGetMyWishes(): CancelablePromise<UsersControllerGetMyWishesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/users/me/wishes'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.name
     * @returns User Пользователь
     * @throws ApiError
     */
    public static usersControllerFindOneByName(data: UsersControllerFindOneByNameData): CancelablePromise<UsersControllerFindOneByNameResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/users/{name}',
            path: {
                name: data.name
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.name
     * @returns Wish Подарки пользователя
     * @throws ApiError
     */
    public static usersControllerFindWishesByName(data: UsersControllerFindWishesByNameData): CancelablePromise<UsersControllerFindWishesByNameResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/users/{name}/wishes',
            path: {
                name: data.name
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns User Пользователь
     * @throws ApiError
     */
    public static usersControllerFind(data: UsersControllerFindData): CancelablePromise<UsersControllerFindResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/users/find',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
}

export class WishesService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Wish Мечта
     * @throws ApiError
     */
    public static wishesControllerCreate(data: WishesControllerCreateData): CancelablePromise<WishesControllerCreateResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/wishes',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @returns Wish Последние мечты
     * @throws ApiError
     */
    public static wishesControllerFindLast(): CancelablePromise<WishesControllerFindLastResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/wishes/last'
        });
    }
    
    /**
     * @returns Wish Популярные мечты
     * @throws ApiError
     */
    public static wishesControllerFindTop(): CancelablePromise<WishesControllerFindTopResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/wishes/top'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns Wish Мечта по идентификатору
     * @throws ApiError
     */
    public static wishesControllerFindOne(data: WishesControllerFindOneData): CancelablePromise<WishesControllerFindOneResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/wishes/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns Wish Редактирование мечты
     * @throws ApiError
     */
    public static wishesControllerUpdate(data: WishesControllerUpdateData): CancelablePromise<WishesControllerUpdateResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/wishes/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns Wish Удаление мечты
     * @throws ApiError
     */
    public static wishesControllerRemove(data: WishesControllerRemoveData): CancelablePromise<WishesControllerRemoveResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/wishes/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns Wish Скопировать мечту
     * @throws ApiError
     */
    public static wishesControllerCopy(data: WishesControllerCopyData): CancelablePromise<WishesControllerCopyResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/wishes/{id}/copy',
            path: {
                id: data.id
            }
        });
    }
    
}

export class WishlistlistsService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown
     * @throws ApiError
     */
    public static wishlistsControllerCreate(data: WishlistsControllerCreateData): CancelablePromise<WishlistsControllerCreateResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/wishlistlists',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @returns unknown
     * @throws ApiError
     */
    public static wishlistsControllerFindAll(): CancelablePromise<WishlistsControllerFindAllResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/wishlistlists'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown
     * @throws ApiError
     */
    public static wishlistsControllerFindOne(data: WishlistsControllerFindOneData): CancelablePromise<WishlistsControllerFindOneResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/wishlistlists/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown
     * @throws ApiError
     */
    public static wishlistsControllerUpdate(data: WishlistsControllerUpdateData): CancelablePromise<WishlistsControllerUpdateResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/wishlistlists/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown
     * @throws ApiError
     */
    public static wishlistsControllerRemove(data: WishlistsControllerRemoveData): CancelablePromise<WishlistsControllerRemoveResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/wishlistlists/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class OffersService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown
     * @throws ApiError
     */
    public static offersControllerCreate(data: OffersControllerCreateData): CancelablePromise<OffersControllerCreateResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/offers',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @returns unknown
     * @throws ApiError
     */
    public static offersControllerFindAll(): CancelablePromise<OffersControllerFindAllResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/offers'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns unknown
     * @throws ApiError
     */
    public static offersControllerFindOne(data: OffersControllerFindOneData): CancelablePromise<OffersControllerFindOneResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/offers/{id}',
            path: {
                id: data.id
            }
        });
    }
    
}

export class AchievementService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Achievement Создание достижения
     * @throws ApiError
     */
    public static achievementsControllerCreate(data: AchievementsControllerCreateData): CancelablePromise<AchievementsControllerCreateResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/achievement',
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @returns Achievement Последние достижения
     * @throws ApiError
     */
    public static achievementsControllerFindLast(): CancelablePromise<AchievementsControllerFindLastResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/achievement/last'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns Achievement Получение достижения
     * @throws ApiError
     */
    public static achievementsControllerFindOne(data: AchievementsControllerFindOneData): CancelablePromise<AchievementsControllerFindOneResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/achievement/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns Achievement Обновление достижения
     * @throws ApiError
     */
    public static achievementsControllerUpdate(data: AchievementsControllerUpdateData): CancelablePromise<AchievementsControllerUpdateResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/achievement/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns Achievement Удаление достижения
     * @throws ApiError
     */
    public static achievementsControllerRemove(data: AchievementsControllerRemoveData): CancelablePromise<AchievementsControllerRemoveResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/achievement/{id}',
            path: {
                id: data.id
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns Achievement Копирование достижения
     * @throws ApiError
     */
    public static achievementsControllerCopy(data: AchievementsControllerCopyData): CancelablePromise<AchievementsControllerCopyResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/achievement/{id}/copy',
            path: {
                id: data.id
            }
        });
    }
    
}