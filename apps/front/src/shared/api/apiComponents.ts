/**
 * Generated by @openapi-codegen
 *
 * @version 1.0.0
 */
import * as reactQuery from '@tanstack/react-query';
import { useApiContext, ApiContext } from './apiContext';
import type * as Fetcher from './apiFetcher';
import { apiFetch } from './apiFetcher';
import type * as Schemas from './apiSchemas';

export type AuthControllerSignUpError = Fetcher.ErrorWrapper<undefined>;

export type AuthControllerSignUpVariables = {
  body: Schemas.CreateUserDto;
} & ApiContext['fetcherOptions'];

export const fetchAuthControllerSignUp = (
  variables: AuthControllerSignUpVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.User,
    AuthControllerSignUpError,
    Schemas.CreateUserDto,
    {},
    {},
    {}
  >({ url: '/signup', method: 'post', ...variables, signal });

export const useAuthControllerSignUp = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.User,
      AuthControllerSignUpError,
      AuthControllerSignUpVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.User,
    AuthControllerSignUpError,
    AuthControllerSignUpVariables
  >({
    mutationFn: (variables: AuthControllerSignUpVariables) =>
      fetchAuthControllerSignUp({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type AuthControllerSigninError = Fetcher.ErrorWrapper<undefined>;

export type AuthControllerSigninVariables = {
  body?: void;
} & ApiContext['fetcherOptions'];

export const fetchAuthControllerSignin = (
  variables: AuthControllerSigninVariables,
  signal?: AbortSignal,
) =>
  apiFetch<void, AuthControllerSigninError, void, {}, {}, {}>({
    url: '/signin',
    method: 'post',
    ...variables,
    signal,
  });

export const useAuthControllerSignin = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      void,
      AuthControllerSigninError,
      AuthControllerSigninVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    void,
    AuthControllerSigninError,
    AuthControllerSigninVariables
  >({
    mutationFn: (variables: AuthControllerSigninVariables) =>
      fetchAuthControllerSignin({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type UsersControllerMeError = Fetcher.ErrorWrapper<undefined>;

export type UsersControllerMeVariables = ApiContext['fetcherOptions'];

export const fetchUsersControllerMe = (
  variables: UsersControllerMeVariables,
  signal?: AbortSignal,
) =>
  apiFetch<Schemas.User, UsersControllerMeError, undefined, {}, {}, {}>({
    url: '/users/me',
    method: 'get',
    ...variables,
    signal,
  });

export const useUsersControllerMe = <TData = Schemas.User,>(
  variables: UsersControllerMeVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.User, UsersControllerMeError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.User, UsersControllerMeError, TData>({
    queryKey: queryKeyFn({
      path: '/users/me',
      operationId: 'usersControllerMe',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchUsersControllerMe({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type UsersControllerUpdateMeError = Fetcher.ErrorWrapper<undefined>;

export type UsersControllerUpdateMeVariables = {
  body?: Schemas.UpdateUserDto;
} & ApiContext['fetcherOptions'];

export const fetchUsersControllerUpdateMe = (
  variables: UsersControllerUpdateMeVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.User,
    UsersControllerUpdateMeError,
    Schemas.UpdateUserDto,
    {},
    {},
    {}
  >({ url: '/users/me', method: 'patch', ...variables, signal });

export const useUsersControllerUpdateMe = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.User,
      UsersControllerUpdateMeError,
      UsersControllerUpdateMeVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.User,
    UsersControllerUpdateMeError,
    UsersControllerUpdateMeVariables
  >({
    mutationFn: (variables: UsersControllerUpdateMeVariables) =>
      fetchUsersControllerUpdateMe({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type UsersControllerGetMyWishesError = Fetcher.ErrorWrapper<undefined>;

export type UsersControllerGetMyWishesResponse = Schemas.Wish[];

export type UsersControllerGetMyWishesVariables = ApiContext['fetcherOptions'];

export const fetchUsersControllerGetMyWishes = (
  variables: UsersControllerGetMyWishesVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    UsersControllerGetMyWishesResponse,
    UsersControllerGetMyWishesError,
    undefined,
    {},
    {},
    {}
  >({ url: '/users/me/wishes', method: 'get', ...variables, signal });

export const useUsersControllerGetMyWishes = <
  TData = UsersControllerGetMyWishesResponse,
>(
  variables: UsersControllerGetMyWishesVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersControllerGetMyWishesResponse,
      UsersControllerGetMyWishesError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    UsersControllerGetMyWishesResponse,
    UsersControllerGetMyWishesError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/users/me/wishes',
      operationId: 'usersControllerGetMyWishes',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchUsersControllerGetMyWishes(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type UsersControllerFindOneByNamePathParams = {
  name: string;
};

export type UsersControllerFindOneByNameError = Fetcher.ErrorWrapper<undefined>;

export type UsersControllerFindOneByNameVariables = {
  pathParams: UsersControllerFindOneByNamePathParams;
} & ApiContext['fetcherOptions'];

export const fetchUsersControllerFindOneByName = (
  variables: UsersControllerFindOneByNameVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.User,
    UsersControllerFindOneByNameError,
    undefined,
    {},
    {},
    UsersControllerFindOneByNamePathParams
  >({ url: '/users/{name}', method: 'get', ...variables, signal });

export const useUsersControllerFindOneByName = <TData = Schemas.User,>(
  variables: UsersControllerFindOneByNameVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.User,
      UsersControllerFindOneByNameError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    Schemas.User,
    UsersControllerFindOneByNameError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/users/{name}',
      operationId: 'usersControllerFindOneByName',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchUsersControllerFindOneByName(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type UsersControllerFindWishesByNamePathParams = {
  name: string;
};

export type UsersControllerFindWishesByNameError =
  Fetcher.ErrorWrapper<undefined>;

export type UsersControllerFindWishesByNameResponse = Schemas.Wish[];

export type UsersControllerFindWishesByNameVariables = {
  pathParams: UsersControllerFindWishesByNamePathParams;
} & ApiContext['fetcherOptions'];

export const fetchUsersControllerFindWishesByName = (
  variables: UsersControllerFindWishesByNameVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    UsersControllerFindWishesByNameResponse,
    UsersControllerFindWishesByNameError,
    undefined,
    {},
    {},
    UsersControllerFindWishesByNamePathParams
  >({ url: '/users/{name}/wishes', method: 'get', ...variables, signal });

export const useUsersControllerFindWishesByName = <
  TData = UsersControllerFindWishesByNameResponse,
>(
  variables: UsersControllerFindWishesByNameVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      UsersControllerFindWishesByNameResponse,
      UsersControllerFindWishesByNameError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    UsersControllerFindWishesByNameResponse,
    UsersControllerFindWishesByNameError,
    TData
  >({
    queryKey: queryKeyFn({
      path: '/users/{name}/wishes',
      operationId: 'usersControllerFindWishesByName',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchUsersControllerFindWishesByName(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type UsersControllerFindError = Fetcher.ErrorWrapper<undefined>;

export type UsersControllerFindVariables = {
  body: Schemas.FindUserDto;
} & ApiContext['fetcherOptions'];

export const fetchUsersControllerFind = (
  variables: UsersControllerFindVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    Schemas.User,
    UsersControllerFindError,
    Schemas.FindUserDto,
    {},
    {},
    {}
  >({ url: '/users/find', method: 'post', ...variables, signal });

export const useUsersControllerFind = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.User,
      UsersControllerFindError,
      UsersControllerFindVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.User,
    UsersControllerFindError,
    UsersControllerFindVariables
  >({
    mutationFn: (variables: UsersControllerFindVariables) =>
      fetchUsersControllerFind({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type WishesControllerCreateError = Fetcher.ErrorWrapper<undefined>;

export type WishesControllerCreateVariables = {
  body?: Schemas.CreateWishDto;
} & ApiContext['fetcherOptions'];

export const fetchWishesControllerCreate = (
  variables: WishesControllerCreateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    undefined,
    WishesControllerCreateError,
    Schemas.CreateWishDto,
    {},
    {},
    {}
  >({ url: '/wishes', method: 'post', ...variables, signal });

export const useWishesControllerCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      WishesControllerCreateError,
      WishesControllerCreateVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    WishesControllerCreateError,
    WishesControllerCreateVariables
  >({
    mutationFn: (variables: WishesControllerCreateVariables) =>
      fetchWishesControllerCreate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type WishesControllerFindLastError = Fetcher.ErrorWrapper<undefined>;

export type WishesControllerFindLastVariables = ApiContext['fetcherOptions'];

export const fetchWishesControllerFindLast = (
  variables: WishesControllerFindLastVariables,
  signal?: AbortSignal,
) =>
  apiFetch<undefined, WishesControllerFindLastError, undefined, {}, {}, {}>({
    url: '/wishes/last',
    method: 'get',
    ...variables,
    signal,
  });

export const useWishesControllerFindLast = <TData = undefined,>(
  variables: WishesControllerFindLastVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, WishesControllerFindLastError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, WishesControllerFindLastError, TData>({
    queryKey: queryKeyFn({
      path: '/wishes/last',
      operationId: 'wishesControllerFindLast',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchWishesControllerFindLast(
        { ...fetcherOptions, ...variables },
        signal,
      ),
    ...options,
    ...queryOptions,
  });
};

export type WishesControllerFindTopError = Fetcher.ErrorWrapper<undefined>;

export type WishesControllerFindTopVariables = ApiContext['fetcherOptions'];

export const fetchWishesControllerFindTop = (
  variables: WishesControllerFindTopVariables,
  signal?: AbortSignal,
) =>
  apiFetch<undefined, WishesControllerFindTopError, undefined, {}, {}, {}>({
    url: '/wishes/top',
    method: 'get',
    ...variables,
    signal,
  });

export const useWishesControllerFindTop = <TData = undefined,>(
  variables: WishesControllerFindTopVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, WishesControllerFindTopError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, WishesControllerFindTopError, TData>({
    queryKey: queryKeyFn({
      path: '/wishes/top',
      operationId: 'wishesControllerFindTop',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchWishesControllerFindTop({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type WishesControllerFindOnePathParams = {
  id: string;
};

export type WishesControllerFindOneError = Fetcher.ErrorWrapper<undefined>;

export type WishesControllerFindOneVariables = {
  pathParams: WishesControllerFindOnePathParams;
} & ApiContext['fetcherOptions'];

export const fetchWishesControllerFindOne = (
  variables: WishesControllerFindOneVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    undefined,
    WishesControllerFindOneError,
    undefined,
    {},
    {},
    WishesControllerFindOnePathParams
  >({ url: '/wishes/{id}', method: 'get', ...variables, signal });

export const useWishesControllerFindOne = <TData = undefined,>(
  variables: WishesControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, WishesControllerFindOneError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, WishesControllerFindOneError, TData>({
    queryKey: queryKeyFn({
      path: '/wishes/{id}',
      operationId: 'wishesControllerFindOne',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchWishesControllerFindOne({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type WishesControllerUpdatePathParams = {
  id: string;
};

export type WishesControllerUpdateError = Fetcher.ErrorWrapper<undefined>;

export type WishesControllerUpdateVariables = {
  body?: Schemas.UpdateWishDto;
  pathParams: WishesControllerUpdatePathParams;
} & ApiContext['fetcherOptions'];

export const fetchWishesControllerUpdate = (
  variables: WishesControllerUpdateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    undefined,
    WishesControllerUpdateError,
    Schemas.UpdateWishDto,
    {},
    {},
    WishesControllerUpdatePathParams
  >({ url: '/wishes/{id}', method: 'patch', ...variables, signal });

export const useWishesControllerUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      WishesControllerUpdateError,
      WishesControllerUpdateVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    WishesControllerUpdateError,
    WishesControllerUpdateVariables
  >({
    mutationFn: (variables: WishesControllerUpdateVariables) =>
      fetchWishesControllerUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type WishesControllerRemovePathParams = {
  id: string;
};

export type WishesControllerRemoveError = Fetcher.ErrorWrapper<undefined>;

export type WishesControllerRemoveVariables = {
  pathParams: WishesControllerRemovePathParams;
} & ApiContext['fetcherOptions'];

export const fetchWishesControllerRemove = (
  variables: WishesControllerRemoveVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    undefined,
    WishesControllerRemoveError,
    undefined,
    {},
    {},
    WishesControllerRemovePathParams
  >({ url: '/wishes/{id}', method: 'delete', ...variables, signal });

export const useWishesControllerRemove = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      WishesControllerRemoveError,
      WishesControllerRemoveVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    WishesControllerRemoveError,
    WishesControllerRemoveVariables
  >({
    mutationFn: (variables: WishesControllerRemoveVariables) =>
      fetchWishesControllerRemove({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type WishesControllerCopyPathParams = {
  id: string;
};

export type WishesControllerCopyError = Fetcher.ErrorWrapper<undefined>;

export type WishesControllerCopyVariables = {
  pathParams: WishesControllerCopyPathParams;
} & ApiContext['fetcherOptions'];

export const fetchWishesControllerCopy = (
  variables: WishesControllerCopyVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    undefined,
    WishesControllerCopyError,
    undefined,
    {},
    {},
    WishesControllerCopyPathParams
  >({ url: '/wishes/{id}/copy', method: 'post', ...variables, signal });

export const useWishesControllerCopy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      WishesControllerCopyError,
      WishesControllerCopyVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    WishesControllerCopyError,
    WishesControllerCopyVariables
  >({
    mutationFn: (variables: WishesControllerCopyVariables) =>
      fetchWishesControllerCopy({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type WishlistsControllerCreateError = Fetcher.ErrorWrapper<undefined>;

export type WishlistsControllerCreateVariables = {
  body?: Schemas.CreateWishlistDto;
} & ApiContext['fetcherOptions'];

export const fetchWishlistsControllerCreate = (
  variables: WishlistsControllerCreateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    undefined,
    WishlistsControllerCreateError,
    Schemas.CreateWishlistDto,
    {},
    {},
    {}
  >({ url: '/wishlistlists', method: 'post', ...variables, signal });

export const useWishlistsControllerCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      WishlistsControllerCreateError,
      WishlistsControllerCreateVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    WishlistsControllerCreateError,
    WishlistsControllerCreateVariables
  >({
    mutationFn: (variables: WishlistsControllerCreateVariables) =>
      fetchWishlistsControllerCreate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type WishlistsControllerFindAllError = Fetcher.ErrorWrapper<undefined>;

export type WishlistsControllerFindAllVariables = ApiContext['fetcherOptions'];

export const fetchWishlistsControllerFindAll = (
  variables: WishlistsControllerFindAllVariables,
  signal?: AbortSignal,
) =>
  apiFetch<undefined, WishlistsControllerFindAllError, undefined, {}, {}, {}>({
    url: '/wishlistlists',
    method: 'get',
    ...variables,
    signal,
  });

export const useWishlistsControllerFindAll = <TData = undefined,>(
  variables: WishlistsControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      WishlistsControllerFindAllError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, WishlistsControllerFindAllError, TData>(
    {
      queryKey: queryKeyFn({
        path: '/wishlistlists',
        operationId: 'wishlistsControllerFindAll',
        variables,
      }),
      queryFn: ({ signal }) =>
        fetchWishlistsControllerFindAll(
          { ...fetcherOptions, ...variables },
          signal,
        ),
      ...options,
      ...queryOptions,
    },
  );
};

export type WishlistsControllerFindOnePathParams = {
  id: string;
};

export type WishlistsControllerFindOneError = Fetcher.ErrorWrapper<undefined>;

export type WishlistsControllerFindOneVariables = {
  pathParams: WishlistsControllerFindOnePathParams;
} & ApiContext['fetcherOptions'];

export const fetchWishlistsControllerFindOne = (
  variables: WishlistsControllerFindOneVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    undefined,
    WishlistsControllerFindOneError,
    undefined,
    {},
    {},
    WishlistsControllerFindOnePathParams
  >({ url: '/wishlistlists/{id}', method: 'get', ...variables, signal });

export const useWishlistsControllerFindOne = <TData = undefined,>(
  variables: WishlistsControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      undefined,
      WishlistsControllerFindOneError,
      TData
    >,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, WishlistsControllerFindOneError, TData>(
    {
      queryKey: queryKeyFn({
        path: '/wishlistlists/{id}',
        operationId: 'wishlistsControllerFindOne',
        variables,
      }),
      queryFn: ({ signal }) =>
        fetchWishlistsControllerFindOne(
          { ...fetcherOptions, ...variables },
          signal,
        ),
      ...options,
      ...queryOptions,
    },
  );
};

export type WishlistsControllerUpdatePathParams = {
  id: string;
};

export type WishlistsControllerUpdateError = Fetcher.ErrorWrapper<undefined>;

export type WishlistsControllerUpdateVariables = {
  body?: Schemas.UpdateWishlistDto;
  pathParams: WishlistsControllerUpdatePathParams;
} & ApiContext['fetcherOptions'];

export const fetchWishlistsControllerUpdate = (
  variables: WishlistsControllerUpdateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    undefined,
    WishlistsControllerUpdateError,
    Schemas.UpdateWishlistDto,
    {},
    {},
    WishlistsControllerUpdatePathParams
  >({ url: '/wishlistlists/{id}', method: 'patch', ...variables, signal });

export const useWishlistsControllerUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      WishlistsControllerUpdateError,
      WishlistsControllerUpdateVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    WishlistsControllerUpdateError,
    WishlistsControllerUpdateVariables
  >({
    mutationFn: (variables: WishlistsControllerUpdateVariables) =>
      fetchWishlistsControllerUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type WishlistsControllerRemovePathParams = {
  id: string;
};

export type WishlistsControllerRemoveError = Fetcher.ErrorWrapper<undefined>;

export type WishlistsControllerRemoveVariables = {
  pathParams: WishlistsControllerRemovePathParams;
} & ApiContext['fetcherOptions'];

export const fetchWishlistsControllerRemove = (
  variables: WishlistsControllerRemoveVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    undefined,
    WishlistsControllerRemoveError,
    undefined,
    {},
    {},
    WishlistsControllerRemovePathParams
  >({ url: '/wishlistlists/{id}', method: 'delete', ...variables, signal });

export const useWishlistsControllerRemove = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      WishlistsControllerRemoveError,
      WishlistsControllerRemoveVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    WishlistsControllerRemoveError,
    WishlistsControllerRemoveVariables
  >({
    mutationFn: (variables: WishlistsControllerRemoveVariables) =>
      fetchWishlistsControllerRemove({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type OffersControllerCreateError = Fetcher.ErrorWrapper<undefined>;

export type OffersControllerCreateVariables = {
  body?: Schemas.CreateOfferDto;
} & ApiContext['fetcherOptions'];

export const fetchOffersControllerCreate = (
  variables: OffersControllerCreateVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    undefined,
    OffersControllerCreateError,
    Schemas.CreateOfferDto,
    {},
    {},
    {}
  >({ url: '/offers', method: 'post', ...variables, signal });

export const useOffersControllerCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      OffersControllerCreateError,
      OffersControllerCreateVariables
    >,
    'mutationFn'
  >,
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    OffersControllerCreateError,
    OffersControllerCreateVariables
  >({
    mutationFn: (variables: OffersControllerCreateVariables) =>
      fetchOffersControllerCreate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type OffersControllerFindAllError = Fetcher.ErrorWrapper<undefined>;

export type OffersControllerFindAllVariables = ApiContext['fetcherOptions'];

export const fetchOffersControllerFindAll = (
  variables: OffersControllerFindAllVariables,
  signal?: AbortSignal,
) =>
  apiFetch<undefined, OffersControllerFindAllError, undefined, {}, {}, {}>({
    url: '/offers',
    method: 'get',
    ...variables,
    signal,
  });

export const useOffersControllerFindAll = <TData = undefined,>(
  variables: OffersControllerFindAllVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, OffersControllerFindAllError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, OffersControllerFindAllError, TData>({
    queryKey: queryKeyFn({
      path: '/offers',
      operationId: 'offersControllerFindAll',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchOffersControllerFindAll({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type OffersControllerFindOnePathParams = {
  id: string;
};

export type OffersControllerFindOneError = Fetcher.ErrorWrapper<undefined>;

export type OffersControllerFindOneVariables = {
  pathParams: OffersControllerFindOnePathParams;
} & ApiContext['fetcherOptions'];

export const fetchOffersControllerFindOne = (
  variables: OffersControllerFindOneVariables,
  signal?: AbortSignal,
) =>
  apiFetch<
    undefined,
    OffersControllerFindOneError,
    undefined,
    {},
    {},
    OffersControllerFindOnePathParams
  >({ url: '/offers/{id}', method: 'get', ...variables, signal });

export const useOffersControllerFindOne = <TData = undefined,>(
  variables: OffersControllerFindOneVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<undefined, OffersControllerFindOneError, TData>,
    'queryKey' | 'queryFn' | 'initialData'
  >,
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<undefined, OffersControllerFindOneError, TData>({
    queryKey: queryKeyFn({
      path: '/offers/{id}',
      operationId: 'offersControllerFindOne',
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchOffersControllerFindOne({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type QueryOperation =
  | {
      path: '/users/me';
      operationId: 'usersControllerMe';
      variables: UsersControllerMeVariables;
    }
  | {
      path: '/users/me/wishes';
      operationId: 'usersControllerGetMyWishes';
      variables: UsersControllerGetMyWishesVariables;
    }
  | {
      path: '/users/{name}';
      operationId: 'usersControllerFindOneByName';
      variables: UsersControllerFindOneByNameVariables;
    }
  | {
      path: '/users/{name}/wishes';
      operationId: 'usersControllerFindWishesByName';
      variables: UsersControllerFindWishesByNameVariables;
    }
  | {
      path: '/wishes/last';
      operationId: 'wishesControllerFindLast';
      variables: WishesControllerFindLastVariables;
    }
  | {
      path: '/wishes/top';
      operationId: 'wishesControllerFindTop';
      variables: WishesControllerFindTopVariables;
    }
  | {
      path: '/wishes/{id}';
      operationId: 'wishesControllerFindOne';
      variables: WishesControllerFindOneVariables;
    }
  | {
      path: '/wishlistlists';
      operationId: 'wishlistsControllerFindAll';
      variables: WishlistsControllerFindAllVariables;
    }
  | {
      path: '/wishlistlists/{id}';
      operationId: 'wishlistsControllerFindOne';
      variables: WishlistsControllerFindOneVariables;
    }
  | {
      path: '/offers';
      operationId: 'offersControllerFindAll';
      variables: OffersControllerFindAllVariables;
    }
  | {
      path: '/offers/{id}';
      operationId: 'offersControllerFindOne';
      variables: OffersControllerFindOneVariables;
    };
